import java.time.LocalDateTime
import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    dependencies {
        compile 'com.sparkjava:spark-core:2.3'
        compile 'com.fasterxml.jackson.jr:jackson-jr-all:2.9.0'
        testCompile 'junit:junit:4.12'
        testCompile 'org.assertj:assertj-core:3.8.0'
        testCompile 'io.cucumber:cucumber-java8:4.2.0'
        testCompile 'io.cucumber:cucumber-junit:4.2.0'
        // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
        compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
        // https://mvnrepository.com/artifact/mysql/mysql-connector-java
        compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.16'
        // https://mvnrepository.com/artifact/org.skyscreamer/jsonassert
        testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.2.3'
        // https://mvnrepository.com/artifact/org.json/json
        compile group: 'org.json', name: 'json', version: '20180813'

    }
    test { finalizedBy jacocoTestReport }
}

class RunAsyncTask extends DefaultTask {
    @TaskAction
    def startAsync() {
        ExecutorService es = Executors.newCachedThreadPool()
        es.submit({
            project.javaexec {
                classpath = project.sourceSets.main.runtimeClasspath
                main = "BooklistServer.java"
            }
        } as Callable)
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integration-test/java')
        }
        resources.srcDir('src/integration-test/resources')
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }

    integrationTestCompile {
        extendsFrom testCompile
    }

    integrationTestRuntime {
        extendsFrom testRuntime
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'com.booklist', 'src/test/resources']
        }
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

}


check.dependsOn integrationTest
integrationTest.mustRunAfter test
